=================
Record selector expression 1
=================

val _ = #1

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (wildcard))
      (rhs
        (atomic_application_expression
          (record_selector_expression
            (int_label
              (index))))))))

=================
Record selector expression 2
=================

val _ = #x

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (wildcard))
      (rhs
        (atomic_application_expression
          (record_selector_expression
            (identifier_label
              (alphanum_identifier))))))))

=================
Not record selector expression 1
=================

val _ = #**

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (wildcard))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (symbolic_identifier))))))))

=================
Not record selector expression 2
=================

val _ = ###

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (wildcard))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (symbolic_identifier))))))))

=================
Unit 1
=================

val _ = ()

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (wildcard))
      (rhs
        (atomic_application_expression
          (unit_expression))))))

=================
Unit 2
=================

val _ = ( )

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (wildcard))
      (rhs
        (atomic_application_expression
          (unit_expression))))))

=================
Unit 3
=================

val _ = ((**))

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (wildcard))
      (rhs
        (atomic_application_expression
          (unit_expression
            (comment)))))))

=================
Tuple
=================

val _ = (x, y)

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (wildcard))
      (rhs
        (atomic_application_expression
          (tuple_expression
            (atomic_application_expression
              (identifier_expression
                (qualified_identifier
                  (alphanum_identifier))))
            (atomic_application_expression
              (identifier_expression
                (qualified_identifier
                  (alphanum_identifier))))))))))

=================
List
=================

val _ = [1, 2, 3]

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (wildcard))
      (rhs
        (atomic_application_expression
          (list_expression
            (atomic_application_expression
              (integer_literal))
            (atomic_application_expression
              (integer_literal))
            (atomic_application_expression
              (integer_literal))))))))

=================
Sequence
=================

val _ = (a;b)

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (wildcard))
      (rhs
        (atomic_application_expression
          (sequence_expression
            (atomic_application_expression
              (identifier_expression
                (qualified_identifier
                  (alphanum_identifier))))
            (atomic_application_expression
              (identifier_expression
                (qualified_identifier
                  (alphanum_identifier))))))))))

=================
Invalid sequence
:error
=================

val _ = (a;)

-------

(source_file
  (expression_declaration
    (list_expression
      (integer_literal)
      (integer_literal)
      (integer_literal))))

==================
Parenthesized
==================

val _ = (a (b andalso c))

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (wildcard))
      (rhs
        (atomic_application_expression
          (parenthesized_expression
            (atomic_application_expression
              (identifier_expression
                (qualified_identifier
                  (alphanum_identifier)))
              (parenthesized_expression
                (conjunction_expression
                  (atomic_application_expression
                    (identifier_expression
                      (qualified_identifier
                        (alphanum_identifier))))
                  (atomic_application_expression
                    (identifier_expression
                      (qualified_identifier
                        (alphanum_identifier)))))))))))))
