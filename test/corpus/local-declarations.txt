=================
Val Decl (simple)
=================

val x = 3

-------

(source_file
  (value_declaration
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (integer_literal))))))

=================
Val Decl (tyconseq)
=================

val ('a, 'b) x = 3

-------

(source_file
  (value_declaration
    (tyvarseq
      (tyvar)
      (tyvar))
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (integer_literal))))))

=================
Val Rec
=================

val rec x = 3

-------

(source_file
  (value_declaration
    (valbind
      (rec)
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (integer_literal))))))

=================
Val Rec (tyconseq)
=================

val 'a rec x = 3

-------

(source_file
  (value_declaration
    (tyvarseq
      (tyvar))
    (valbind
      (rec)
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (integer_literal))))))

=================
Val Rec And (tyconseq)
=================

val 'a rec x = 3 and y = 3

-------

(source_file
  (value_declaration
    (tyvarseq
      (tyvar))
    (valbind
      (rec)
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (integer_literal))))
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (integer_literal))))))

=================
Val Rec And Rec (tyconseq)
=================

val 'a rec x = 3 and rec y = 3

-------

(source_file
  (value_declaration
    (tyvarseq
      (tyvar))
    (valbind
      (rec)
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (integer_literal))))
    (valbind
      (rec)
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (integer_literal))))))

=================
fun dec
=================

fun f x = 3

-------

(source_file
  (function_declaration
    (fvalbind
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (integer_literal)))))))

=================
fun dec 2
=================

fun f x y = 3

-------

(source_file
  (function_declaration
    (fvalbind
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (integer_literal)))))))

=================
fun dec 3
=================

fun f x y = 3 | f z = 3

-------

(source_file
  (function_declaration
    (fvalbind
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (integer_literal))))
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (integer_literal)))))))

=================
fun dec 4
=================

fun f x y = 3 | f z = 3 and g x = 5

-------

(source_file
  (function_declaration
    (fvalbind
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (integer_literal))))
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (integer_literal)))))
    (fvalbind
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (integer_literal)))))))

=================
fun dec infix
=================

fun _ f y = 3

-------

(source_file
  (function_declaration
    (fvalbind
      (clause
        (lhs
          (wildcard)
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (integer_literal)))))))

=================
fun dec infix curried
=================

fun (_ f y) 10 = 3

-------

(source_file
  (function_declaration
    (fvalbind
      (clause
        (lhs
          (parenthesized_pattern
            (application_pattern
              (wildcard)
              (identifier_pattern
                (qualified_identifier
                  (type_identifier)))
              (identifier_pattern
                (qualified_identifier
                  (type_identifier)))))
          (literal_pattern
            (integer_literal)))
        (rhs
          (atomic_application_expression
            (integer_literal)))))))

=================
fun dec infix curried op
=================

fun op f (_, y) 10 = 3

-------

(source_file
  (function_declaration
    (fvalbind
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (tuple_pattern
            (wildcard)
            (identifier_pattern
              (qualified_identifier
                (type_identifier))))
          (literal_pattern
            (integer_literal)))
        (rhs
          (atomic_application_expression
            (integer_literal)))))))

=================
Type dec
=================

type t = int

-----

(source_file
  (type_declaration
    (tybind
      (lhs)
      (rhs
        (qualified_identifier
          (type_identifier))))))

=================
Type dec (tyvarseq)
=================

type 'a t = int

-----

(source_file
  (type_declaration
    (tybind
      (tyvarseq
        (tyvar))
      (lhs)
      (rhs
        (qualified_identifier
          (type_identifier))))))

=================
Type dec and
=================

type t = A.x and t2 = B.x

-----

(source_file
  (type_declaration
    (tybind
      (lhs)
      (rhs
        (qualified_identifier
          (structure_name)
          (type_identifier))))
    (tybind
      (lhs)
      (rhs
        (qualified_identifier
          (structure_name)
          (type_identifier))))))

=================
Type dec and (tyvarseq)
=================

type 'a t = x and 'b t2 = x

-----

(source_file
  (type_declaration
    (tybind
      (tyvarseq
        (tyvar))
      (lhs)
      (rhs
        (qualified_identifier
          (type_identifier))))
    (tybind
      (tyvarseq
        (tyvar))
      (lhs)
      (rhs
        (qualified_identifier
          (type_identifier))))))

=================
Type dec symbolic
=================

type -- = x

-----

(source_file
  (type_declaration
    (tybind
      (lhs)
      (rhs
        (qualified_identifier
          (type_identifier))))))

=================
Datatype dec (bool)
=================

datatype bool = true | false

-----

(source_file
  (datatype_declaration
    (datbind
      (type_identifier)
      (constructor
        (identifier))
      (constructor
        (identifier)))))

=================
Datatype dec (list)
=================

datatype 'a list = nil | op:: of 'a * 'a list

-----

(source_file
  (datatype_declaration
    (datbind
      (tyvarseq
        (tyvar))
      (type_identifier)
      (constructor
        (identifier))
      (constructor
        (identifier)
        (tuple_type
          (tyvar)
          (tyapp
            (tyvar)
            (qualified_identifier
              (type_identifier))))))))

=================
Datatype dec rec
=================

datatype t1 = A | B and t2 = C | D

-----

(source_file
  (datatype_declaration
    (datbind
      (type_identifier)
      (constructor
        (identifier))
      (constructor
        (identifier)))
    (datbind
      (type_identifier)
      (constructor
        (identifier))
      (constructor
        (identifier)))))

=================
Abstype dec
=================

abstype t1 = A with val x = 3 end

-----

(source_file
  (abstype_declaration
    (datbind
      (type_identifier)
      (constructor
        (identifier)))
    (value_declaration
      (valbind
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (integer_literal)))))))

=================
Exception dec
=================

exception A

-----

(source_file
  (exception_declaration
    (exbind
      (identifier))))

=================
Exception dec 2
=================

exception op == of int

-----

(source_file
  (exception_declaration
    (exbind
      (identifier)
      (qualified_identifier
        (type_identifier)))))

=================
Exception dec 3
=================

exception ** and //

-----

(source_file
  (exception_declaration
    (exbind
      (identifier))
    (exbind
      (identifier))))

=================
Exception dec 4
=================

exception ** = //

-----

(source_file
  (exception_declaration
    (exbind
      (identifier)
      (qualified_identifier
        (type_identifier)))))

=================
Local dec
=================

local val x = 3 in val z = 4 end

-----

(source_file
  (structure_local_declaration
    (local
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (type_identifier))))
          (rhs
            (atomic_application_expression
              (integer_literal))))))
    (exposed
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (type_identifier))))
          (rhs
            (atomic_application_expression
              (integer_literal))))))))

=================
Local dec multi
=================

local ;;;; val x = 3 ; val y = 4 ;;;;; in val z = 4 val a = 5 end

-----

(source_file
  (structure_local_declaration
    (local
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (type_identifier))))
          (rhs
            (atomic_application_expression
              (integer_literal)))))
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (type_identifier))))
          (rhs
            (atomic_application_expression
              (integer_literal))))))
    (exposed
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (type_identifier))))
          (rhs
            (atomic_application_expression
              (integer_literal)))))
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (type_identifier))))
          (rhs
            (atomic_application_expression
              (integer_literal))))))))

=================
Open dec
=================

open x y SMLofNJ.Control


-----

(source_file
  (open_declaration
    (qualified_structure_identifier
      (structure_identifier))
    (qualified_structure_identifier
      (structure_identifier))
    (qualified_structure_identifier
      (structure_identifier)
      (structure_identifier))))

=================
infixl
=================

infix ++ --

-----

(source_file
  (infixl_declaration
    (identifier)
    (identifier)))

=================
infixr
=================

infixr 9 ++ --

-----

(source_file
  (infixr_declaration
    (identifier)
    (identifier)))

=================
Sequential (infix)
=================
val x = y
infix a
infix b
-----

(source_file
  (value_declaration
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (type_identifier)))))))
  (infixl_declaration
    (identifier))
  (infixl_declaration
    (identifier)))

=================
Sequential (fun)
=================
val x = y
fun f x = x
fun f x = x
-----

(source_file
  (value_declaration
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (type_identifier)))))))
  (function_declaration
    (fvalbind
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (identifier_expression
              (qualified_identifier
                (type_identifier))))))))
  (function_declaration
    (fvalbind
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier)))
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (identifier_expression
              (qualified_identifier
                (type_identifier)))))))))

=================
Sequential (datatype)
=================
val x = y
datatype x = x

-----

(source_file
  (value_declaration
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (type_identifier)))))))
  (datatype_declaration
    (datbind
      (type_identifier)
      (constructor
        (identifier)))))

=================
Sequential (abstype)
=================
val x = y
abstype x = x with val x = y val x = y end
-----

(source_file
  (value_declaration
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (type_identifier)))))))
  (abstype_declaration
    (datbind
      (type_identifier)
      (constructor
        (identifier)))
    (value_declaration
      (valbind
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (identifier_expression
              (qualified_identifier
                (type_identifier)))))))
    (value_declaration
      (valbind
        (lhs
          (identifier_pattern
            (qualified_identifier
              (type_identifier))))
        (rhs
          (atomic_application_expression
            (identifier_expression
              (qualified_identifier
                (type_identifier)))))))))

=================
Sequential (abstype)
=================
val x = y
exception A
exception B
-----

(source_file
  (value_declaration
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (type_identifier)))))))
  (exception_declaration
    (exbind
      (identifier)))
  (exception_declaration
    (exbind
      (identifier))))

=================
Sequential (abstype)
=================
val x = y
local in end
-----

(source_file
  (value_declaration
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (type_identifier)))))))
  (structure_local_declaration))

=================
Sequential (abstype)
=================
val x = y
local in end
-----

(source_file
  (value_declaration
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (type_identifier)))))))
  (structure_local_declaration))

=================
Sequential (open)
=================
val x = y
open x
open y
-----

(source_file
  (value_declaration
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (type_identifier)))))))
  (open_declaration
    (qualified_structure_identifier
      (structure_identifier)))
  (open_declaration
    (qualified_structure_identifier
      (structure_identifier))))

=================
Sequential (infixr)
=================
val x = y
infixr x
infixr y
-----

(source_file
  (value_declaration
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (type_identifier)))))))
  (infixr_declaration
    (identifier))
  (infixr_declaration
    (identifier)))

=================
Sequential (nonfix)
=================
val x = y
nonfix x
nonfix y
-----

(source_file
  (value_declaration
    (valbind
      (lhs
        (identifier_pattern
          (qualified_identifier
            (type_identifier))))
      (rhs
        (atomic_application_expression
          (identifier_expression
            (qualified_identifier
              (type_identifier)))))))
  (nonfix_declaration
    (identifier))
  (nonfix_declaration
    (identifier)))
