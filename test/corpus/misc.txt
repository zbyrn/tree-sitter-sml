=====================
Fun and case
=====================

fun annotation a =
 case a of
   a => a
 | b => b
 | c => c

--------

(source_file
  (function_declaration
    (fvalbind
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (identifier)))
          (identifier_pattern
            (qualified_identifier
              (identifier))))
        (rhs
          (case_expression
            (identifier_expression
              (qualified_identifier
                (identifier)))
            (match
              (rule
                (identifier_pattern
                  (qualified_identifier
                    (identifier)))
                (identifier_expression
                  (qualified_identifier
                    (identifier))))
              (rule
                (identifier_pattern
                  (qualified_identifier
                    (identifier)))
                (identifier_expression
                  (qualified_identifier
                    (identifier))))
              (rule
                (identifier_pattern
                  (qualified_identifier
                    (identifier)))
                (identifier_expression
                  (qualified_identifier
                    (identifier)))))))))))

=====================
Local declaration
=====================

local
     val x = y
     val a = b
     structure S = F()
in
     val c = d
end

------

(source_file
  (structure_local_declaration
    (local
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (identifier))))
          (rhs
            (identifier_expression
              (qualified_identifier
                (identifier))))))
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (identifier))))
          (rhs
            (identifier_expression
              (qualified_identifier
                (identifier))))))
      (structure_declaration
        (strbind
          (structure_identifier)
          (functor_application_expression
            (functor_identifier)))))
    (exposed
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (identifier))))
          (rhs
            (identifier_expression
              (qualified_identifier
                (identifier)))))))))

=====================
Overload declaration
=====================

_overload ~ :   ('a -> 'a)
as  Int.~
and IntInf.~
and Real.~

------

(source_file
  (overload_declaration
    (identifier)
    (arrow_type
      (tyvar)
      (tyvar))
    (qualified_identifier
      (structure_identifier)
      (identifier))
    (qualified_identifier
      (structure_identifier)
      (identifier))
    (qualified_identifier
      (structure_identifier)
      (identifier))))

=====================
Confusing symbols 1
=====================

fun ''`x:''=(x=x;x);

--------

(source_file
  (function_declaration
    (tyvarseq
      (tyvar))
    (fvalbind
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (identifier)))
          (identifier_pattern
            (qualified_identifier
              (identifier))))
        (tyvar)
        (rhs
          (sequence_expression
            (application_expression
              (identifier_expression
                (qualified_identifier
                  (identifier)))
              (identifier_expression
                (qualified_identifier
                  (identifier)))
              (identifier_expression
                (qualified_identifier
                  (identifier))))
            (identifier_expression
              (qualified_identifier
                (identifier)))))))))

=====================
Confusing symbols 1
=====================

type '& = ' list

---------------

(source_file
  (type_declaration
    (tybind
      (tyvarseq
        (tyvar))
      (lhs
        (type_identifier))
      (rhs
        (tyapp
          (tyvar)
          (qualified_tycon
            (type_identifier)))))))

======================
Where and 1
======================

structure FuncBinIO =
  FFunctionalIO(type vec = Word8Vector.vector)
    :> FUNC_BIN_IO
         where type vector = Word8Vector.vector list
           and type elem = Word8.word

----

(source_file
  (structure_declaration
    (strbind
      (structure_identifier)
      (opaque_constraint_expression
        (functor_application_expression
          (functor_identifier)
          (type_declaration
            (tybind
              (lhs
                (type_identifier))
              (rhs
                (qualified_tycon
                  (structure_name)
                  (type_identifier))))))
        (type_realization_expression
          (signature_identifier_expression
            (signature_identifier))
          (where_equation
            (qualified_tycon
              (type_identifier))
            (tyapp
              (qualified_tycon
                (structure_name)
                (type_identifier))
              (qualified_tycon
                (type_identifier))))
          (where_equation
            (qualified_tycon
              (type_identifier))
            (qualified_tycon
              (structure_name)
              (type_identifier))))))))

======================
Where and 2
======================

signature V =
sig
    structure A : S where type t = int and type u = bool
    and       B : S where type t = int and type u = bool
end

------------

(source_file
  (signature_declaration
    (sigbind
      (signature_identifier)
      (sig_expression
        (structure_spec
          (strdesc
            (structure_identifier)
            (type_realization_expression
              (signature_identifier_expression
                (signature_identifier))
              (where_equation
                (qualified_tycon
                  (type_identifier))
                (qualified_tycon
                  (type_identifier)))
              (where_equation
                (qualified_tycon
                  (type_identifier))
                (qualified_tycon
                  (type_identifier)))))
          (strdesc
            (structure_identifier)
            (type_realization_expression
              (signature_identifier_expression
                (signature_identifier))
              (where_equation
                (qualified_tycon
                  (type_identifier))
                (qualified_tycon
                  (type_identifier)))
              (where_equation
                (qualified_tycon
                  (type_identifier))
                (qualified_tycon
                  (type_identifier))))))))))
