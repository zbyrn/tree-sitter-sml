=====================
Fun and case
=====================

fun annotation a =
 case a of
   a => a
 | b => b
 | c => c

--------

(source_file
  (function_declaration
    (fvalbind
      (clause
        (lhs
          (identifier_pattern
            (qualified_identifier
              (identifier)))
          (identifier_pattern
            (qualified_identifier
              (identifier))))
        (rhs
          (case_expression
            (identifier_expression
              (qualified_identifier
                (identifier)))
            (match
              (rule
                (identifier_pattern
                  (qualified_identifier
                    (identifier)))
                (identifier_expression
                  (qualified_identifier
                    (identifier))))
              (rule
                (identifier_pattern
                  (qualified_identifier
                    (identifier)))
                (identifier_expression
                  (qualified_identifier
                    (identifier))))
              (rule
                (identifier_pattern
                  (qualified_identifier
                    (identifier)))
                (identifier_expression
                  (qualified_identifier
                    (identifier)))))))))))

=====================
Local declaration
=====================

local
     val x = y
     val a = b
     structure S = F()
in
     val c = d
end

------

(source_file
  (structure_local_declaration
    (local
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (identifier))))
          (rhs
            (identifier_expression
              (qualified_identifier
                (identifier))))))
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (identifier))))
          (rhs
            (identifier_expression
              (qualified_identifier
                (identifier))))))
      (structure_declaration
        (strbind
          (structure_identifier)
          (functor_application_expression
            (functor_identifier)))))
    (exposed
      (value_declaration
        (valbind
          (lhs
            (identifier_pattern
              (qualified_identifier
                (identifier))))
          (rhs
            (identifier_expression
              (qualified_identifier
                (identifier)))))))))

=====================
Overload declaration
=====================

_overload ~ :   ('a -> 'a)
as  Int.~
and IntInf.~
and Real.~

------

(source_file
  (overload_declaration
    (identifier)
    (arrow_type
      (tyvar)
      (tyvar))
    (qualified_identifier
      (structure_identifier)
      (identifier))
    (qualified_identifier
      (structure_identifier)
      (identifier))
    (qualified_identifier
      (structure_identifier)
      (identifier))))
